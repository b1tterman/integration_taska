<?xml version="1.0" encoding="UTF-8"?>

<!--Generated by CTT Stubs Editor 26.05.22 17:42-->
<stubRest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ctt.cinimex.ru/stubRest.xsd" endpoint="localhost" port="9065" requestEncoding="windows-1251" responseEncoding="windows-1251" name="Block 12" language="groovy" theadPoolSize="20" secret="false">
  <security> 
    <ssl needClientsAuthentication="true" port="9064"> 
      <KeyStore password="qwerty123" path="Keys\keystore.jks" type="JKS"/>  
      <TrustStore password="qwerty123" path="Keys\truststore.jks" type="JKS"/> 
    </ssl> 
  </security>
  <mnemonics>
    <MnemonicsPath>Mnemonics/Xpath/mnem.txt</MnemonicsPath>
  </mnemonics>
  <addToClassloader>
    <file>Lib/mysql-connector-java-8.0.29.jar</file>
  </addToClassloader>
  <logConfig level="ALL" writeMessages="true" memoryStore="false"/>
  <method name="DELETE">
    <request>
      <content><![CDATA[]]></content>
    </request>
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong! Or not :)]]></response>
    <script name="delete" type="main"><![CDATA[import javax.servlet.http.HttpServletRequest;
import groovy.util.XmlSlurper;
import groovy.xml.MarkupBuilder;
import com.thetransactioncompany.jsonrpc2.*; 
import ru.cinimex.stub.infrastructure.env.var.TemplateVariable;
import ru.cinimex.stub.infrastructure.groovy.env.var.impl.request.RequestVariable;
import ru.cinimex.stub.utils.JSON;
import ru.cinimex.stub.utils.XML;
import ru.cinimex.stub.utils.DB;
import ru.cinimex.stub.utils.Service;


Service.loadProjectExtraSettings(new File(projectDirectory.getCanonicalPath()),  "Results/extra.settings");

HttpServletRequest request = contextRequest.getRequest().getNativeMessage();
log.info ("Resource path: " + request.getPathInfo());
ResourcePath = request.getPathInfo();
log.info ("ResourcePath: " + ResourcePath);
header = contextRequest.getTransportHeader("Content-Type");
log.info ("header: " + header);
log.info("HTTPS: " + request.isSecure());


switch (header) 
{	
    case "text/json; charset=Windows-1251":
        
            java.util.Map<String, Object> headers = new java.util.HashMap<String, Object>();
            headers.put("Content-Type", "text/json; charset=Windows-1251");
            contextResponse.setTransportHeaders(headers); 
        
            if (ResourcePath == "//deleteBankClient")
                { 
                    try
                    {
                        Map<String, String> mapJson = request.getParameterMap();
                        log.info ("Parameter mapJson size: " + mapJson.size())
                        log.info ("Request parameters:")
                        for (Map.Entry<String, String> entry : mapJson.entrySet())
                        log.info ("   " + entry.getKey() + ": " + entry.getValue());

                        ClientId_value = mapJson.get("ClientId");
                        clientIdValue = ClientId_value[0];
                        log.info("ClientId value: " + clientIdValue);

                        if (mapJson.size()>0)
            
                        {
                        log.info("kak dela bratiwka? est client id");
                        String sql_check= "select count(*) from  dbikchentaev_client where id = " + clientIdValue;
                        log.info("sql: " + sql_check);
                        String count = DB.executeSQLSelect("ctt", sql_check);
				        log.info("Count clients: " + count);
                                             
                        if (Integer.valueOf(count) > 0)
                        //если в таблице есть запись с таким клиентом - удаляем её
                        {   
                            String sql = "delete from  dbikchentaev_client where id = "+ clientIdValue;
                            Boolean delete_db = DB.executeSQLStatement("ctt", sql);
                            log.info("Client deleted");
                            response=contextResponse.getTemplate("default");
                            contextResponse.setHttpStatusCode(200);
                        }
                        else 
                        {  //если запись с клиентом не найдена, отправляем 204 код
                            log.info("Client not found");
                            response=contextResponse.getTemplate("default");
                            contextResponse.setHttpStatusCode(204);}

                        } 
            
                    }                    

                    catch(Exception e)

                    {   log.info("No CleintId parametr in request")
                        response=contextResponse.getTemplate("default");
				    	contextResponse.setHttpStatusCode(422);	
                    }
                    
                }
                else
                {   //если пришел другой ресурс
                    log.info("Wrong resourse")
                    response=contextResponse.getTemplate("default");
					contextResponse.setHttpStatusCode(422);	
                }
        return response;
        break;

    //если пришел другой заголовок   
    default:
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(501);
			break;
}

return response;]]></script>
  </method>
  <method name="GET"> 
    <request> 
      <content><![CDATA[]]></content> 
    </request>  
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>  
    <response name="xml"><![CDATA[     <BankClient>
        <ClientId>${id}</ClientId>
        <ClientName>${name}</ClientName>
        <CurrencyCode>${code}</CurrencyCode>
        <Currency>${currency}</Currency>
     </BankClient>
]]></response>  
    <response name="json"><![CDATA[
        {
           "ClientId":0,
           "ClientName":"",
           "Currency":"",
           "CurrencyCode":0
        }
]]></response>  
    <response name="xml_all"><![CDATA[<?xml version="1.0" encoding="Windows-1251"?>
  <BankClients>
  </BankClients>]]></response>  
    <response name="json_all"><![CDATA[{
     "BankClients":[
 ]]></response>  
    <response name="xml_client"><![CDATA[<?xml version="1.0" encoding="Windows-1251"?>
  <BankClients>
     <BankClient>
        <ClientId>${id}</ClientId>
        <ClientName>${name}</ClientName>
        <CurrencyCode>${code}</CurrencyCode>
        <Currency>${currency}</Currency>
     </BankClient>
  </BankClients>]]></response>  
    <response name="json_single"><![CDATA[{
     "BankClients":[
        {
           "ClientId":${id},
           "ClientName":"${name}",
           "Currency":"${currency}",
           "CurrencyCode":${code}
        }
     ]
  }]]></response>  
    <script name="get" type="main"><![CDATA[import javax.servlet.http.HttpServletRequest;
import groovy.util.XmlSlurper;
import groovy.xml.MarkupBuilder;
import com.thetransactioncompany.jsonrpc2.*; 
import ru.cinimex.stub.infrastructure.env.var.TemplateVariable;
import ru.cinimex.stub.infrastructure.groovy.env.var.impl.request.RequestVariable;
import ru.cinimex.stub.utils.JSON;
import ru.cinimex.stub.utils.XML;
import ru.cinimex.stub.utils.DB;
import ru.cinimex.stub.utils.Service;


Service.loadProjectExtraSettings(new File(projectDirectory.getCanonicalPath()),  "Results/extra.settings");

HttpServletRequest request = contextRequest.getRequest().getNativeMessage();
log.info ("Resource path: " + request.getPathInfo());
ResourcePath = request.getPathInfo();
log.info ("ResourcePath: " + ResourcePath);
header = contextRequest.getTransportHeader("Content-Type");
log.info ("header: " + header);
log.info("HTTPS: " + request.isSecure());


switch (header) 
{
	case "text/xml; charset=Windows-1251":       

        java.util.Map<String, Object> headers = new java.util.HashMap<String, Object>();
        headers.put("Content-Type", "text/xml; charset=Windows-1251");
        contextResponse.setTransportHeaders(headers); 
       
        if (ResourcePath == "//getBankClient")
        {   
            try{
            Map<String, String> map = request.getParameterMap();
            log.info ("Parameter map size: " + map.size())
            log.info ("Request parameters:")
            for (Map.Entry<String, String> entry : map.entrySet())
            log.info ("   " + entry.getKey() + ": " + entry.getValue());
            
            ClientId_value = null;
            ClientId_value = map.get("ClientId");
            clientIdValue = null;
            clientIdValue = ClientId_value[0];
            log.info("ClientId value: " + clientIdValue);

            if (map.get("ClientId"))
            
            {
                log.info("kak dela bratiwka? est client id");
                String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency where id = " + clientIdValue;
                List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
                int count = req_db.size();
                log.info("количество записей в БД: " + count);

                if (count > 0)
                {   log.info("kak dela bratiwka, count > 0");
                    log.info("req_db: " + req_db[0]);
                name = req_db[0].get("name");
                id = req_db[0].get("id");
                code = req_db[0].get("code");
                currency = req_db[0].get("currency");
            
                log.info("id:  " + id + ", name:  " + name + ", currency:  " + currency+ ", code:  " + code);
                    
                response=contextResponse.getTemplate("xml_client");
                response.setParam("name", name);
                response.setParam("id", id);
                response.setParam("code", code);
                response.setParam("currency", currency);
                contextResponse.setHttpStatusCode(200);}

                else {  
                    log.info("Client not found");
                    response=contextResponse.getTemplate("default");
                    contextResponse.setHttpStatusCode(204);}

            } }

           catch(Exception e)
        
            {   log.info("kak dela bratiwka? net client id");
                String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency";
                List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
                int count = req_db.size();
                log.info("количество записей в БД: " + count);
            
                response = contextResponse.getTemplate("xml_all");
                responseChild = contextResponse.getTemplate("xml");
                String xpath = "/*[local-name()='BankClients']";
                String encoding = "Windows-1251";

                //по циклу считываем данные клиентов из бд и добавляем их в ответ
                for (int i=0; i<count; i++)

                {
                //log.info("req_db[" + i + "]: " + req_db[i]);       
                
                responseChild = XML.changeElementValue(responseChild.toString(), "/*[local-name()='BankClient']/*[local-name()='ClientName']", req_db[i].get("name").toString(), encoding);
                responseChild = XML.changeElementValue(responseChild.toString(), "/*[local-name()='BankClient']/*[local-name()='ClientId']", req_db[i].get("id").toString(), encoding);
                responseChild = XML.changeElementValue(responseChild.toString(), "/*[local-name()='BankClient']/*[local-name()='CurrencyCode']", req_db[i].get("code").toString(), encoding);
                responseChild = XML.changeElementValue(responseChild.toString(), "/*[local-name()='BankClient']/*[local-name()='Currency']", req_db[i].get("currency").toString(), encoding);
                //log.info("req_db[" + i + "]: " + responseChild);
                    
                response = XML.addChild(response.toString(), xpath, responseChild.toString(), encoding);        
                }        
                contextResponse.setHttpStatusCode(200);
            }
        }
        else
            {   response=contextResponse.getTemplate("default");
                contextResponse.setHttpStatusCode(422);
            };
            break;

    case "text/json; charset=Windows-1251":
        
                java.util.Map<String, Object> headersJson = new java.util.HashMap<String, Object>();
                headersJson.put("Content-Type", "text/json; charset=Windows-1251");
                contextResponse.setTransportHeaders(headersJson); 
                
                if (ResourcePath == "//getBankClient")        
                { 
				try 
                    {
                        Map<String, String> mapJson = request.getParameterMap();
                        log.info ("Parameter map size: " + mapJson.size())
                        log.info ("Request parameters:")
                        for (Map.Entry<String, String> entry : mapJson.entrySet())
                        log.info ("   " + entry.getKey() + ": " + entry.getValue());
                        
                        ClientId_valueJson = null;
                        ClientId_valueJson = mapJson.get("ClientId");
                        clientIdValueJson = null;
                        clientIdValueJson = ClientId_valueJson[0];
                        log.info("ClientId value: " + clientIdValueJson);
                                                            
                        String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency where id = " + clientIdValueJson;
                        List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
                        int count = req_db.size();
                        log.info("количество записей в БД: " + count);

                        if (count > 0)
                        //если запись в бд нашли
                        
                        {log.info("req_db: " + req_db[0]);
                        name = req_db[0].get("name");
                        id = req_db[0].get("id");
                        code = req_db[0].get("code");
                        currency = req_db[0].get("currency");
            
                        log.info("id:  " + id + ", name:  " + name + ", currency:  " + currency+ ", code:  " + code);

                        response=contextResponse.getTemplate("json_single");
                        response.setParam("name", name);
                        response.setParam("id", id);
                        response.setParam("code", code);
                        response.setParam("currency", currency);
                        contextResponse.setHttpStatusCode(200);}
                        else 
                        {				
                        response=contextResponse.getTemplate("default");
                        contextResponse.setHttpStatusCode(204);	
                        }
                        break;
                    }

                catch(Exception e)
                    {
                        String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency";
                        List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
                        int count = req_db.size();
                        log.info("количество записей в БД: " + count);
                    
                        response = contextResponse.getTemplate("json_all");
						responseStr = response.toString();
                        responseChild = contextResponse.getTemplate("json");  
                        log.info("respchild: " + responseChild);
                        log.info("resp: " + response);

                        //по циклу считываем данные клиентов из бд и добавляем их в ответ
                        for (int i=0; i<count; i++)

                        {
                        log.info("req_db[" + i + "]: " + req_db[i]);      

                        /*responseChild.setParam("name", req_db[i].get("name").toString());
                        responseChild.setParam("id", req_db[i].get("id").toString());
                        responseChild.setParam("currency", req_db[i].get("currency").toString());
                        responseChild.setParam("code", req_db[i].get("code").toString());*/

                        log.info("name: " + req_db[i].get("name").toString());
                                          
                        responseChild = JSON.writeValueToJsonString(responseChild.toString(), "\$.ClientName", req_db[i].get("name").toString());
                        responseChild = JSON.writeValueToJsonString(responseChild.toString(), "\$.Currency", req_db[i].get("currency").toString());
                        responseChild = JSON.writeValueToJsonString(responseChild.toString(), "\$.CurrencyCode", req_db[i].get("code"));
                        responseChild = JSON.writeValueToJsonString(responseChild.toString(), "\$.ClientId", req_db[i].get("id"));
                        
						log.info("responseChild: " + responseChild.toString());
						if(i==count-1)
						responseStr = responseStr+responseChild.toString();
						else responseStr = responseStr+responseChild.toString()+",";
                        //response = JSON.writeValueToJsonString(response.toString(), "\$.BankClients["+i+"]", responseChild);  
                        //response.setParam("BankClient", responseChild.toString());
                        log.info("response[" + i + "]: " + responseStr);                            
                        } 
						response = responseStr+"]}";   
						log.info("response: " + JSON.prettyPrintJsonGson(response.toString()));     
                        contextResponse.setHttpStatusCode(200);
                        break;
                    };
                    }

                else
                {   response=contextResponse.getTemplate("default");
                    contextResponse.setHttpStatusCode(422);
                };
                break;

    default:
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(501);
			break;
}

return response;]]></script> 
  </method>
  <method name="HEAD"> 
    <request> 
      <content><![CDATA[]]></content> 
    </request>  
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>  
    <script name="head" type="main"><![CDATA[response=contextResponse.getTemplate("default");
contextResponse.setHttpStatusCode(405);
return response;	]]></script> 
  </method>
  <method name="OPTIONS"> 
    <request> 
      <content><![CDATA[]]></content> 
    </request>  
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>  
    <script name="options" type="main"><![CDATA[response=contextResponse.getTemplate("default");
contextResponse.setHttpStatusCode(405);
return response;	]]></script> 
  </method>
  <method name="PATCH"> 
    <request> 
      <content><![CDATA[]]></content> 
    </request>  
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>  
    <script name="patch" type="main"><![CDATA[response=contextResponse.getTemplate("default");
contextResponse.setHttpStatusCode(405);
return response;	]]></script> 
  </method>
  <method name="POST"> 
    <request> 
      <content><![CDATA[]]></content> 
    </request>  
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>  
    <response name="xml_resp"><![CDATA[<?xml version="1.0" encoding="Windows-1251"?>
  <BankClients>
     <BankClient>
        <ClientId>${id}</ClientId>
        <ClientName>${name}</ClientName>
        <CurrencyCode>${code}</CurrencyCode>
        <Currency>${currency}</Currency>
     </BankClient>
  </BankClients>]]></response>  
    <response name="json_resp"><![CDATA[{
     "BankClients":[
        {
           "ClientId":${id},
           "ClientName":"${name}",
           "Currency":"${currency}",
           "CurrencyCode":${code}
        }
     ]
  }]]></response>  
    <script name="post" type="main"><![CDATA[import javax.servlet.http.HttpServletRequest;
import groovy.util.XmlSlurper;
import groovy.xml.MarkupBuilder;
import com.thetransactioncompany.jsonrpc2.*; 
import ru.cinimex.stub.infrastructure.env.var.TemplateVariable;
import ru.cinimex.stub.infrastructure.groovy.env.var.impl.request.RequestVariable;
import ru.cinimex.stub.utils.JSON;
import ru.cinimex.stub.utils.XML;
import ru.cinimex.stub.utils.DB;
import ru.cinimex.stub.utils.Service;

Service.loadProjectExtraSettings(new File(projectDirectory.getCanonicalPath()),  "Results/extra.settings");

RequestVariable request = contextRequest.getRequest();
HttpServletRequest httpRequest = request.getNativeMessage();
log.info("HTTPS: " + httpRequest.isSecure());
header = contextRequest.getTransportHeader("Content-Type");


//часть скрипта для обработки XML

switch (header) {
	case "text/xml; charset=Windows-1251":	

        try {
			
		clientId = request.evalXpathStr("/*[local-name()='getBankClient']/*[local-name()='BankClient']/*[local-name()='ClientId']/text()");
		java.util.Map<String, Object> headers = new java.util.HashMap<String, Object>();
		headers.put("Content-Type", "text/xml; charset=Windows-1251");
		contextResponse.setTransportHeaders(headers);

		String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency where id = " + clientId;
		List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
		int count = req_db.size();
		log.info("количество записей в БД: " + count);

		if (count > 0)
		//если запись в бд нашли
		
		{log.info("req_db: " + req_db[0]);
        name = req_db[0].get("name");
		id = req_db[0].get("id");
		code = req_db[0].get("code");
		currency = req_db[0].get("currency");
	
		log.info("id:  " + id + ", name:  " + name + ", currency:  " + currency+ ", code:  " + code);
			
		response=contextResponse.getTemplate("xml_resp");
		response.setParam("name", name);
		response.setParam("id", id);
		response.setParam("code", code);
		response.setParam("currency", currency);
		contextResponse.setHttpStatusCode(200);		
		break;}
		//если из бд ничего не получили
		else{		 	
		response=contextResponse.getTemplate("default");
		contextResponse.setHttpStatusCode(204);	
		break;	}
			
		} catch (Exception e) {
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(400);	
		}
				
		return response;
	

//часть скрипта для обработки Json

	case "text/json; charset=Windows-1251":
		itsJson = JSON.isJSONValid(request.getBody());
		switch(itsJson)
		{case true:
				
				String json_client_id = JSON.readJsonValue(request.toString(), "\$.getBankClient.BankClient.ClientId").toString();     
				java.util.Map<String, Object> headers = new java.util.HashMap<String, Object>();
				headers.put("Content-Type", "text/json; charset=Windows-1251");
				contextResponse.setTransportHeaders(headers); 

				String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency where id = " + json_client_id;
				List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
				int count = req_db.size();
				log.info("количество записей в БД: " + count);

				if (count > 0)
				//если запись в бд нашли
				
				{log.info("req_db: " + req_db[0]);
				name = req_db[0].get("name");
				id = req_db[0].get("id");
				code = req_db[0].get("code");
				currency = req_db[0].get("currency");
	
				log.info("id:  " + id + ", name:  " + name + ", currency:  " + currency+ ", code:  " + code);

				response=contextResponse.getTemplate("json_resp");
				response.setParam("name", name);
				response.setParam("id", id);
				response.setParam("code", code);
				response.setParam("currency", currency);
				contextResponse.setHttpStatusCode(200);}
				else {				
				response=contextResponse.getTemplate("default");
				contextResponse.setHttpStatusCode(204);	}				
				return response;
// если внутри оказался не JSON, то отправляем код 400
		default:
				response=contextResponse.getTemplate("default");
				contextResponse.setHttpStatusCode(400);
				break;		
		}
		return response;
// если header не xml и не json - отправляем код 501
	default:
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(501);
			break;
}
return response;	
]]></script> 
  </method>
  <method name="PUT">
    <request>
      <content><![CDATA[]]></content>
    </request>
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>
    <response name="xml_resp"><![CDATA[<?xml version="1.0" encoding="Windows-1251"?>
  <BankClients>
     <BankClient>
        <ClientId>${id}</ClientId>
        <ClientName>${name}</ClientName>
        <CurrencyCode>${code}</CurrencyCode>
        <Currency>${currency}</Currency>
     </BankClient>
  </BankClients>]]></response>
    <response name="json_resp"><![CDATA[{
     "BankClients":[
        {
           "ClientId":${id},
           "ClientName":"${name}",
           "Currency":"${currency}",
           "CurrencyCode":${code}
        }
     ]
  }]]></response>
    <script name="put" type="main"><![CDATA[import javax.servlet.http.HttpServletRequest;
import groovy.util.XmlSlurper;
import groovy.xml.MarkupBuilder;
import com.thetransactioncompany.jsonrpc2.*; 
import ru.cinimex.stub.infrastructure.env.var.TemplateVariable;
import ru.cinimex.stub.infrastructure.groovy.env.var.impl.request.RequestVariable;
import ru.cinimex.stub.utils.JSON;
import ru.cinimex.stub.utils.XML;
import ru.cinimex.stub.utils.DB;
import ru.cinimex.stub.utils.Service;

Service.loadProjectExtraSettings(new File(projectDirectory.getCanonicalPath()),  "Results/extra.settings");

RequestVariable request = contextRequest.getRequest();
HttpServletRequest httpRequest = request.getNativeMessage();
log.info("HTTPS: " + httpRequest.isSecure());
header = contextRequest.getTransportHeader("Content-Type");

log.info("request body: " + request.getBody());


//часть скрипта для обработки XML

switch (header) {
	case "text/xml; charset=Windows-1251":
					
		java.util.Map<String, Object> headers = new java.util.HashMap<String, Object>();
		headers.put("Content-Type", "text/xml; charset=Windows-1251");
		contextResponse.setTransportHeaders(headers);
		
		
		clientCurCode = request.evalXpathStr("/*[local-name()='AddBankClient']/*[local-name()='CurrencyCode']/text()");
		clientName = request.evalXpathStr("/*[local-name()='AddBankClient']/*[local-name()='ClientName']/text()");

		log.info("curcode: " + clientCurCode);
		log.info("name: " + clientName);
		

		String sqlCheck = "select * from  dbikchentaev_currency where code = " + clientCurCode;		
		List<HashMap<String, Object>> req_check = DB.executeSQLSelectList("ctt", sqlCheck);
		int countCheck = req_check.size();
		log.info("Количество записей с кодом валюты: " + countCheck);

		//Если код валюты найден, то создаем клиента с такой валютой.
		if (countCheck > 0)
		{
		//Добавляем клиента
		String sqlIns = "insert into dbikchentaev_client (name,code) values ('" + clientName + "','" + clientCurCode + "')";
		Boolean insert_db = DB.executeSQLStatement("ctt", sqlIns);
		log.info("insert_db: " + insert_db);

		//считываем все поля для клиента id=22
		String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency where id = '22'";
		List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
		int count = req_db.size();
		log.info("количество записей c id=22 в БД: " + count);	
		
		//Вычитываем имя клиента из бд и сравниваем с именем из запроса
		log.info("name: " + req_db[0].get("name"));
		assert req_db[0].get("name") == clientName;
	
		//создаем ответ
		response=contextResponse.getTemplate("xml_resp");
		response.setParam("name", req_db[0].get("name"));
		response.setParam("id", req_db[0].get("id"));
		response.setParam("code", req_db[0].get("code"));
		response.setParam("currency", req_db[0].get("currency"));
		contextResponse.setHttpStatusCode(200);	
		}
		//Если код валюты не найден - выдаем 206 код.
		else
		{
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(206);	
		}		
		return response;
	

//часть скрипта для обработки Json

	case "text/json; charset=Windows-1251":
		itsJson = JSON.isJSONValid(request.getBody());
		switch(itsJson)
		{case true:			

				json_client_code = JSON.readJsonValue(request.toString(), "\$.AddBankClient.CurrencyCode").toString();   
				json_client_name = JSON.readJsonValue(request.toString(), "\$.AddBankClient.ClientName").toString();   

				java.util.Map<String, Object> headers = new java.util.HashMap<String, Object>();
				headers.put("Content-Type", "text/json; charset=Windows-1251");
				contextResponse.setTransportHeaders(headers); 

				String sqlCheck = "select * from  dbikchentaev_currency where code = " + json_client_code;		
				List<HashMap<String, Object>> req_check = DB.executeSQLSelectList("ctt", sqlCheck);
				int countCheck = req_check.size();
				log.info("Количество записей с кодом валюты: " + countCheck);

				//Если код валюты найден, то создаем клиента с такой валютой.
				if (countCheck > 0)
				{
				//Добавляем клиента
				String sqlIns = "insert into dbikchentaev_client (name,code) values ('" + json_client_name + "','" + json_client_code + "')";
				Boolean insert_db = DB.executeSQLStatement("ctt", sqlIns);
				log.info("insert_db: " + insert_db);

				//считываем все поля для клиента id=22
				String sql = "select * from  dbikchentaev_client natural join dbikchentaev_currency where id = '22'";
				List<HashMap<String, Object>> req_db = DB.executeSQLSelectList("ctt", sql);
				int count = req_db.size();
				log.info("количество записей c id=22 в БД: " + count);	
				
				//Вычитываем имя клиента из бд и сравниваем с именем из запроса
				log.info("name: " + req_db[0].get("name"));
				assert req_db[0].get("name") == json_client_name;
			
				//создаем ответ
				response=contextResponse.getTemplate("json_resp");
				response.setParam("name", req_db[0].get("name"));
				response.setParam("id", req_db[0].get("id"));
				response.setParam("code", req_db[0].get("code"));
				response.setParam("currency", req_db[0].get("currency"));
				contextResponse.setHttpStatusCode(200);	
				}
				//Если код валюты не найден - выдаем 206 код.
				else
				{
					response=contextResponse.getTemplate("default");
					contextResponse.setHttpStatusCode(206);	
				}				
				return response;
// если внутри оказался не JSON, то отправляем код 400
		default:
				response=contextResponse.getTemplate("default");
				contextResponse.setHttpStatusCode(400);
				break;		
		}
		return response;
// если header не xml и не json - отправляем код 501
	default:
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(501);
			break;
}
return response;	
]]></script>
  </method>
  <method name="TRACE">
    <request>
      <content><![CDATA[]]></content>
    </request>
    <response name="default"><![CDATA[Hello Cinimex! Something is wrong!]]></response>
    <script name="trace" type="main"><![CDATA[response=contextResponse.getTemplate("default");
contextResponse.setHttpStatusCode(405);
return response;	]]></script>
  </method>
</stubRest>
