<?xml version="1.0" encoding="UTF-8"?>

<!--Generated by CTT Stubs Editor 07.06.22 11:31-->
<stubRest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ctt.cinimex.ru/stubRest.xsd" endpoint="localhost" port="9065" requestEncoding="UTF-8" responseEncoding="UTF-8" name="Block 13" language="groovy" theadPoolSize="20" secret="false">
  <addToClassloader>
    <file>Lib/java-jwt-3.18.1.jar</file>
  </addToClassloader>
  <logConfig level="ALL" writeMessages="true" memoryStore="false"/>
  <method name="POST">
    <request>
      <content><![CDATA[]]></content>
    </request>
    <response name="default"><![CDATA[Hello Cinimex! Something wrong!]]></response>
    <response name="token"><![CDATA[{
  "id":${id},
  "username":"${username}",
  "token" : "${token}",
  "expires_in" : ${expires_in}
}]]></response>
    <response name="json"><![CDATA[{
  "BankClients" : [{
      "ClientId":${clientId},
      "ClientName":"${clientName}",
      "Currency":"${currency}",
      "CurrencyCode":${currencyCode}
  }
]]></response>
    <script name="post" type="main"><![CDATA[import ru.cinimex.stub.infrastructure.groovy.env.var.impl.request.RequestVariable;
import ru.cinimex.stub.infrastructure.env.var.TemplateVariable;
import javax.servlet.http.HttpServletRequest;
import ru.cinimex.stub.utils.JSON;
import ru.cinimex.stub.utils.ContentType;
import com.jayway.jsonpath.PathNotFoundException

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.TokenExpiredException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.auth0.jwt.interfaces.JWTVerifier;

import com.google.common.base.Joiner;
import com.google.common.base.Splitter;

String secretPhrase = "Hello CTT";

clients = 
  [15: ["Петров", 812],
   20: ["Николаев", 978],
    8: ["Васильев", 643]];

currency = [812:"USD", 643:"RUB", 978:"EUR"];

RequestVariable request = contextRequest.getRequest();
HttpServletRequest httpRequest = request.getNativeMessage();
String requestBody = request.getBody();
String contentType = contextRequest.getTransportHeader("Content-Type");
log.info ("Content-Type: " + contentType);
String ResourcePath = httpRequest.getPathInfo();
log.info ("ResourcePath: " + ResourcePath);

switch (contentType) {
//часть скрипта для обработки Json

	case "text/json; charset=Windows-1251":
		if(JSON.isJSONValid(request.getBody()))
		{			
                //если ресурс authenticate - то создаем токен

                if (ResourcePath == "//authenticate")
                {    
                    String username = null;           
                    //пробуем получить имя клиента и время жизни токена
                    try { 
                        username = JSON.readJsonValue(requestBody, "\$.username"); 
                    } catch (PathNotFoundException ex) {
                    }
                    
                    //если запрос без имени клиента - сразу отправляем 204
                    if (username==null)
                    {response=contextResponse.getTemplate("default");
                    contextResponse.setHttpStatusCode(204);
                    return "";};

                    // время в секундах, пробуем считать из запроса другое значение
                    int seconds = 5;
                    try { 
                        seconds = JSON.readJsonValue(requestBody, "\$.expired_at"); 
                    } catch (PathNotFoundException ex) {
                    }

                    //пробуем создать токен                                

                    TemplateVariable template = contextResponse.getTemplate("token");
                    template.setParam("username", username);

                    long expireTime = (new Date().getTime()) + seconds * 1000; // milliseconds
                    Date expireDate = new Date(expireTime);

                    template.setParam("expires_in", seconds);

                    Algorithm algorithm = Algorithm.HMAC256(secretPhrase);
                    String token = JWT.create()
                        .withIssuer("auth0")
                        .withClaim("username", username)
                        .withExpiresAt(expireDate)
                        .sign(algorithm);
                    template.setParam("token", token);

                    String payloads = System.getProperty("JWT_PAYLOADS");
                    List<String> payloadList = new ArrayList<String>(Splitter.on(",")
                        .trimResults()
                        .omitEmptyStrings()
                        .splitToList(payloads));


                    int index = token.indexOf(".",0) + 1;
                    payloadList.add(token.substring(index, token.indexOf(".", index)))
                    template.setParam("id", payloadList.size());

                    System.setProperty("JWT_PAYLOADS", Joiner.on(",").join(payloadList));
                    contextResponse.setHttpStatusCode(200);
                    return template;
                 
                    
                }
                //если не authenticate, то проверяем токен и даем ответ
                else 
                {    
                    //json_client_id = JSON.readJsonValue(requestBody, "\$.getBankClient.BankClient.ClientId"); 
                    String json_client_id = JSON.readJsonValue(request.toString(), "\$.getBankClient.BankClient.ClientId").toString();   		      
                    log.info("json_id: " + json_client_id);

                    contextResponse.setTransportHeaders("Content-Type", "text/json; charset=Windows-1251"); 
                    String authorization = contextRequest.getTransportHeader("Authorization");
                   
                    if (authorization == null) {
                        contextResponse.setHttpStatusCode(401);
                        contextResponse.setTransportHeader("WWW-Authenticate", "Bearer error=\"Authorization Header is absent.\"");
                    return "";}

                    if (!authorization.startsWith("Bearer ")) {
                        contextResponse.setHttpStatusCode(401);
                        contextResponse.setTransportHeader("WWW-Authenticate", "Bearer error=\"Bad Authorization Header.\"");
                    return "";}	

                    if(json_client_id == null)
                        {   
                            response=contextResponse.getTemplate("default");
                            contextResponse.setHttpStatusCode(204); 
                            return "";
                        }
                    else
                        {
                            String token = authorizationHeader.substring(7);

                            Algorithm algorithm = Algorithm.HMAC256(secretPhrase);
                            JWTVerifier verifier = JWT.require(algorithm)
                                .withIssuer("auth0")
                                .build();
                            DecodedJWT jwt = verifier.verify(token);
                            String payload = jwt.getPayload();
                            log.info "payload: " + payload;

                            String payloads = System.getProperty("JWT_PAYLOADS");
                            List<String> payloadList = Splitter.on(",")
                                .trimResults()
                                .omitEmptyStrings()
                                .splitToList(payloads);
                            log.info "payloadList: " + payloadList
                            

                            inf = clients[json_client_id];
                            if (inf == null) {                            
                            contextResponse.setHttpStatusCode(204);
                            return "";}

                            TemplateVariable template = contextResponse.getTemplate("json");
                            template.setParam("clientId", json_client_id);
                            template.setParam("clientName", inf[0]);
                            template.setParam("currencyCode", inf[1]);
                            template.setParam("currency", currency[inf[1]]);
                            response=contextResponse.getTemplate(template);
                            contextResponse.setHttpStatusCode(200);
                        }
                }
                return response;
                break;}
// если внутри оказался не JSON, то отправляем код 400
		 else
				{response=contextResponse.getTemplate("default");
				contextResponse.setHttpStatusCode(400);
				return "";
                break;
                }
// если header не xml и не json - отправляем код 501
	default:
			response=contextResponse.getTemplate("default");
			contextResponse.setHttpStatusCode(501);
			break;
}
return response;	
]]></script>
  </method>
</stubRest>
